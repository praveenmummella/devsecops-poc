version: 0.2
env:
  parameter-store:
    SONAR_TOKEN: "/devsecops/sonar/token"
  variables:
    APP_PORT: "5000"
    SONAR_PROJECT_KEY: "devsecops-poc"
    ZAP_IMAGE: "ghcr.io/zaproxy/zaproxy:stable"
    ARTIFACT_NAME: "app.jar"
    ZAP_THRESHOLD: "MEDIUM"

phases:
  install:
    runtime-versions:
      java: corretto17
    commands:
      - echo "Installing dependencies..."
      - yum install -y nc || apt-get update && apt-get install -y netcat # Ensure netcat is installed
      - echo "Creating ZAP configuration..."
      - mkdir -p zap/reports
      - cat <<EOF > zap/zap.conf
        exclude=.*static/.*
        progress=100
        10011=IGNORE  # Cookie Without Secure Flag
        10015=IGNORE  # X-Content-Type-Options
        40012=WARN    # CSP Header
        EOF
      - echo "ZAP config file created."
      
  pre_build:
    commands:
      - echo "Fetching SonarQube token..."
      - export SONAR_TOKEN=$(aws ssm get-parameter --name "/devsecops/sonar/token" --with-decryption --query "Parameter.Value" --output text || echo "")

  build:
    commands:
      - echo "Building application..."
      - mvn -B clean package
      - ls -lh target/

  post_build:
    commands:
      - echo "Starting application..."
      - nohup java -jar target/*.jar --server.port=${APP_PORT} > app.log 2>&1 & echo $! > app.pid
      - sleep 30
      
      - echo "Checking if application is running..."
      - if ! nc -zv localhost ${APP_PORT}; then echo "Application failed to start"; exit 1; fi
      - echo "Application started successfully!"

      - echo "Running ZAP DAST scan..."
      - >
        docker run --rm 
        --network host 
        --add-host=host.docker.internal:host-gateway 
        -v $(pwd)/zap:/zap/wrk:rw 
        ${ZAP_IMAGE} 
        zap-baseline.py -d 
        -t http://localhost:${APP_PORT} 
        -c /zap/wrk/zap.conf 
        -r /zap/wrk/reports/report.html 
        -x /zap/wrk/reports/report.xml 
        -j /zap/wrk/reports/report.json 
        -l ${ZAP_THRESHOLD} || [ $? -eq 2 ] && echo "ZAP scan completed with warnings"

      - echo "Copying artifacts..."
      - cp target/*.jar ${ARTIFACT_NAME}

artifacts:
  files:
    - "${ARTIFACT_NAME}"
    - "zap/reports/*"
    - "app.log"
  name: "devsecops-artifacts"

cache:
  paths:
    - "/root/.m2/**/*"
