version: 0.2
env:
  parameter-store:
    SONAR_TOKEN: "/devsecops/sonar/token"
  variables:
    APP_PORT: "5000"
    SONAR_PROJECT_KEY: "devsecops-poc"
    ZAP_IMAGE: "ghcr.io/zaproxy/zaproxy:stable"
    ARTIFACT_NAME: "app.jar"
    ZAP_THRESHOLD: "MEDIUM"

phases:
  install:
    runtime-versions:
      java: corretto17
    commands:
      - echo "Installing dependencies..."
      - yum install -y nc || { echo "Netcat installation failed"; exit 1; }
      
      - echo "Creating ZAP configuration..."
      - mkdir -p zap/reports
      - |
        # Create config with explicit tab characters
        printf "exclude\t^.*/static/.*\tExclude static files\n" > zap/zap.conf
        printf "level\tMEDIUM\t\n" >> zap/zap.conf
        printf "progress\t100\t\n" >> zap/zap.conf
        printf "rules\t10011=IGNORE\tCookie Without Secure Flag\n" >> zap/zap.conf
        printf "rules\t10015=IGNORE\tX-Content-Type-Options\n" >> zap/zap.conf
        printf "rules\t40012=WARN\tCSP Header\n" >> zap/zap.conf
        
        # Verify configuration
        echo "=== ZAP Config Verification ==="
        echo "File contents:"
        cat zap/zap.conf
        echo -e "\nHex dump (09 = tab):"
        hexdump -C zap/zap.conf | head -10
        echo -e "\nField counts:"
        awk -F'\t' '{print NR, NF}' zap/zap.conf
        echo "============================="

  pre_build:
    commands:
      - export SONAR_TOKEN=$(aws ssm get-parameter --name "/devsecops/sonar/token" --with-decryption --query "Parameter.Value" --output text || echo "")

  build:
    commands:
      - mvn -B clean package

  post_build:
    commands:
      - echo "Starting application..."
      - nohup java -jar target/*.jar --server.port=${APP_PORT} > app.log 2>&1 & echo $! > app.pid
      - sleep 30

      - echo "Checking application..."
      - if ! nc -zv localhost ${APP_PORT}; then echo "Application failed to start"; exit 1; fi

      - echo "Running ZAP scan..."
      - >
        docker run --rm --network host \
        -v $(pwd)/zap:/zap/wrk:rw \
        ${ZAP_IMAGE} \
        zap-baseline.py \
        -t "http://localhost:${APP_PORT}" \
        -c "/zap/wrk/zap.conf" \
        -r "/zap/wrk/reports/report.html" \
        -x "/zap/wrk/reports/report.xml" \
        -j "/zap/wrk/reports/report.json" \
        -l "${ZAP_THRESHOLD}" \
        -d -v
      - ZAP_EXIT_CODE=$?
      - if [ $ZAP_EXIT_CODE -eq 0 ] || [ $ZAP_EXIT_CODE -eq 2 ]; then
          echo "ZAP scan completed successfully";
          if [ $ZAP_EXIT_CODE -eq 2 ]; then echo "Scan completed with warnings"; fi
        else
          exit $ZAP_EXIT_CODE
        fi

      - cp target/*.jar ${ARTIFACT_NAME}

artifacts:
  files:
    - "${ARTIFACT_NAME}"
    - "zap/reports/*"
    - "app.log"
  name: "devsecops-artifacts"

cache:
  paths:
    - "/root/.m2/**/*"
