version: 0.2
env:
  parameter-store:
    SONAR_TOKEN: "/devsecops/sonar/token"
  variables:
    APP_PORT: "5000"
    SONAR_PROJECT_KEY: "devsecops-poc"
    ZAP_IMAGE: "ghcr.io/zaproxy/zaproxy:stable"
    ARTIFACT_NAME: "app.jar"
    ZAP_THRESHOLD: "MEDIUM"

phases:
  install:
    runtime-versions:
      java: corretto17
    commands:
      - echo "Setting up environment..."
      - mkdir -p zap/reports
      - echo "exclude=.*/static/.*" > zap/rules.conf
      - echo "level=MEDIUM" >> zap/rules.conf
      - echo "progress=100" >> zap/rules.conf
      - echo "rules=" >> zap/rules.conf
      - echo "  10011=IGNORE" >> zap/rules.conf
      - echo "  10015=IGNORE" >> zap/rules.conf
      - echo "  40012=WARN" >> zap/rules.conf

  pre_build:
    commands:
      - echo "Fetching SonarQube token..."
      - export SONAR_TOKEN=$(aws ssm get-parameter --name "/devsecops/sonar/token" --with-decryption --query "Parameter.Value" --output text || echo "")

  build:
    commands:
      - echo "Building application..."
      - mvn -B clean package

  post_build:
    commands:
      - echo "Starting application..."
      - nohup java -jar target/*.jar --server.port=${APP_PORT} > app.log 2>&1 & echo $! > app.pid
      - sleep 30
      
      - echo "Running ZAP scan..."
      - docker run --network host --rm \
          -v $(pwd)/zap:/zap/wrk:rw \
          ${ZAP_IMAGE} zap-baseline.py \
          -t http://localhost:${APP_PORT} \
          -c /zap/wrk/rules.conf \
          -r /zap/wrk/reports/report.html \
          -x /zap/wrk/reports/report.xml \
          -j /zap/wrk/reports/report.json \
          -l ${ZAP_THRESHOLD} || \
          if [ $? -eq 2 ]; then echo "ZAP completed with warnings"; else exit $?; fi
      
      - echo "Copying artifacts..."
      - cp target/*.jar ${ARTIFACT_NAME}

artifacts:
  files:
    - "app.jar"
    - "zap/reports/*"
    - "app.log"
  name: "devsecops-artifacts"

cache:
  paths:
    - "/root/.m2/**/*"
