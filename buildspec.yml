version: 0.2
env:
  parameter-store:
    SONAR_TOKEN: "/devsecops/sonar/token"  # Secure token storage
  variables:
    SONAR_PROJECT_KEY: "devsecops-poc"
    APP_PORT: "5000"
    ZAP_IMAGE: "ghcr.io/zaproxy/zaproxy:stable"
    MAVEN_OPTS: "-Dspring.profiles.active=build -Djava.security.egd=file:/dev/./urandom"

phases:
  install:
    runtime-versions:
      java: corretto17
    commands:
      # Verify tools
      - docker --version
      - java -version
      - mvn -v
      
      # Pull ZAP image (with retry logic)
      - for i in {1..3}; do docker pull ${ZAP_IMAGE} && break || sleep 15; done
      
      # Install SonarScanner (latest version)
      - curl -sSL -o sonar-scanner.zip $(curl -s https://api.github.com/repos/SonarSource/sonar-scanner-cli/releases/latest | grep browser_download_url | grep linux | cut -d '"' -f 4)
      - unzip -qq sonar-scanner.zip -d /opt
      - rm sonar-scanner.zip
      - ln -sf /opt/sonar-scanner-*/bin/sonar-scanner /usr/local/bin/

  pre_build:
    commands:
      # Secure dependency download
      - mvn -B dependency:go-offline dependency:resolve-plugins
      - export SONAR_TOKEN=$(aws ssm get-parameter --name "/devsecops/sonar/token" --with-decryption --query "Parameter.Value" --output text)

  build:
    commands:
      # Build with quality gates
      - mvn -B clean verify 
        org.jacoco:jacoco-maven-plugin:prepare-agent 
        org.sonarsource.scanner.maven:sonar-maven-plugin:sonar 
        org.owasp:dependency-check-maven:check
        -Dsonar.projectKey=${SONAR_PROJECT_KEY} 
        -Dsonar.host.url=https://sonarcloud.io 
        -Dsonar.login=${SONAR_TOKEN} 
        -Dsonar.java.binaries=target/classes 
        -Dsonar.coverage.jacoco.xmlReportPaths=target/site/jacoco/jacoco.xml 
        -Dsonar.pullrequest.provider=github 
        -Dsonar.scm.disabled=true

  post_build:
    commands:
      # Application lifecycle management
      - APP_JAR=$(ls target/*.jar | head -1)
      - nohup java -jar ${APP_JAR} --server.port=${APP_PORT} > app.log 2>&1 & echo $! > app.pid
      - sleep 15
      
      # Health check with timeout
      - timeout 60 bash -c 'while ! curl -sSf http://localhost:${APP_PORT}/actuator/health >/dev/null; do sleep 5; done'
      
      # ZAP Security Scan (with improved config)
      - docker run --network host --rm 
          -v $(pwd):/zap/wrk 
          -e ZAP_JVM_OPTS="-Xmx4096m" 
          ${ZAP_IMAGE} 
          zap-baseline.py 
          -t http://localhost:${APP_PORT}/ 
          -c zap.conf 
          -x zap-report.xml 
          -J zap-report.json 
          -r zap-report.html
      
      # Cleanup
      - kill -9 $(cat app.pid) || true
      - rm -f app.pid

artifacts:
  files:
    - target/*.jar
    - target/site/**
    - zap-report.*
    - dependency-check-report.*
    - app.log
  name: devsecops-artifacts-${CODEBUILD_BUILD_ID}
  discard-paths: yes

cache:
  paths:
    - '/root/.m2/**/*'
    - '/opt/sonar-scanner/**/*'
