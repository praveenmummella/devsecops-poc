version: 0.2

env:
  variables:
    SONAR_PROJECT_KEY: "devsecops-poc"
    APP_PORT: "5000"
    ZAP_VERSION: "2.12.0"

phases:
  install:
    runtime-versions:
      java: corretto17
    commands:
      # Verify Docker access
      - docker info
      
      # Pull ZAP from correct repository
      - docker pull owasp/zap2docker-stable:${ZAP_VERSION} || docker pull owasp/zap2docker:${ZAP_VERSION}
      
      # Install SonarScanner
      - curl -sSL https://binaries.sonarsource.com/Distribution/sonar-scanner-cli/sonar-scanner-latest-linux.zip -o sonar-scanner.zip
      - unzip -qq sonar-scanner.zip -d /opt
      - rm sonar-scanner.zip
      - ln -s /opt/sonar-scanner-*/bin/sonar-scanner /usr/local/bin/sonar-scanner

  pre_build:
    commands:
      - mvn dependency:go-offline -B

  build:
    commands:
      - mvn -B clean package
      - mvn sonar:sonar \
          -Dsonar.projectKey=${SONAR_PROJECT_KEY} \
          -Dsonar.host.url=https://sonarcloud.io \
          -Dsonar.login=${SONAR_TOKEN} \
          -Dsonar.java.binaries=target/classes \
          -Dsonar.coverage.jacoco.xmlReportPaths=target/site/jacoco/jacoco.xml
      - mvn -B dependency-check:check

  post_build:
    commands:
      # Start application
      - nohup java -jar target/*.jar --server.port=${APP_PORT} > app.log 2>&1 & echo $! > app.pid
      - sleep 20

      # Health check
      - timeout 60 bash -c 'while ! curl -sSf http://localhost:${APP_PORT}/health; do sleep 2; done'

      # ZAP scan with fallback repository
      - if ! docker run --network host --rm \
          -v $(pwd)/target:/zap/wrk \
          -e JAVA_OPTS="-Xmx4096m" \
          owasp/zap2docker-stable:${ZAP_VERSION} \
          zap-baseline.py \
          -t http://localhost:${APP_PORT} \
          -r zap-report.html \
          -x zap-report.xml \
          -J zap-report.json; then
          docker run --network host --rm \
            -v $(pwd)/target:/zap/wrk \
            -e JAVA_OPTS="-Xmx4096m" \
            owasp/zap2docker:${ZAP_VERSION} \
            zap-baseline.py \
            -t http://localhost:${APP_PORT} \
            -r zap-report.html \
            -x zap-report.xml \
            -J zap-report.json
        fi

      # Cleanup
      - kill $(cat app.pid) || true

artifacts:
  files:
    - target/*.jar
    - target/site/**
    - target/*-report.*
    - app.log
  name: devsecops-artifacts-${CODEBUILD_BUILD_ID}
